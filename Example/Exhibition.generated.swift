// Generated using Sourcery 1.7.0 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT
import Exhibition
import SwiftUI

public struct Exhibition: View {
    public init() {}
    
    public var body: some View {
        NavigationView {
            ExhibitListView(
                exhibits: [
                    CustomButton_Previews.anyExhibit, //  Struct: module = nil, imports = [Exhibition, SwiftUI], allImports = [Exhibition, SwiftUI], typealiases = [:], isExtension = false, kind = struct, accessLevel = internal, name = CustomButton_Previews, isUnknownExtension = false, isGeneric = false, localName = CustomButton_Previews, rawVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(name: \"CustomButton\") { context in\n        CustomButton(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            action: context.parameter(name: \"action\")\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af15aa0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomButton_Previews), actualDefinedInTypeName = Optional(CustomButton_Previews), Variable: name = previews, typeName = some View, isComputed = true, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = , accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.none), isMutable = false, defaultValue = nil, annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af15cf0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomButton_Previews), actualDefinedInTypeName = Optional(CustomButton_Previews)], rawMethods = [], rawSubscripts = [], initializers = [], annotations = [:], documentation = [], staticVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(name: \"CustomButton\") { context in\n        CustomButton(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            action: context.parameter(name: \"action\")\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af15aa0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomButton_Previews), actualDefinedInTypeName = Optional(CustomButton_Previews), Variable: name = previews, typeName = some View, isComputed = true, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = , accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.none), isMutable = false, defaultValue = nil, annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af15cf0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomButton_Previews), actualDefinedInTypeName = Optional(CustomButton_Previews)], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [], computedVariables = [], storedVariables = [], inheritedTypes = ["ExhibitProvider", "PreviewProvider"], inherits = [:], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = [:], modifiers = [], fileName = Optional("CustomButton.swift"), kind = struct
                    CustomDatePicker_Previews.anyExhibit, //  Struct: module = nil, imports = [SwiftUI, Exhibition], allImports = [SwiftUI, Exhibition], typealiases = [:], isExtension = false, kind = struct, accessLevel = internal, name = CustomDatePicker_Previews, isUnknownExtension = false, isGeneric = false, localName = CustomDatePicker_Previews, rawVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(\n        name: \"CustomDatePicker\",\n        section: \"Pickers\"\n    ) { context in\n        CustomDatePicker(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            date: context.parameter(name: \"date\")\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af19000>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomDatePicker_Previews), actualDefinedInTypeName = Optional(CustomDatePicker_Previews)], rawMethods = [], rawSubscripts = [], initializers = [], annotations = [:], documentation = [], staticVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(\n        name: \"CustomDatePicker\",\n        section: \"Pickers\"\n    ) { context in\n        CustomDatePicker(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            date: context.parameter(name: \"date\")\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af19000>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomDatePicker_Previews), actualDefinedInTypeName = Optional(CustomDatePicker_Previews)], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [], computedVariables = [], storedVariables = [], inheritedTypes = ["ExhibitProvider", "PreviewProvider"], inherits = [:], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = [:], modifiers = [], fileName = Optional("CustomDatePicker.swift"), kind = struct
                    CustomSegmentedControl_Previews.anyExhibit, //  Struct: module = nil, imports = [Exhibition, SwiftUI], allImports = [Exhibition, SwiftUI], typealiases = [:], isExtension = false, kind = struct, accessLevel = internal, name = CustomSegmentedControl_Previews, isUnknownExtension = false, isGeneric = false, localName = CustomSegmentedControl_Previews, rawVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(\n        name: \"CustomSegmentedControl\",\n        section: \"Pickers\"\n    ) { context in\n        CustomSegmentedControl(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            selection: context.parameter(name: \"selection\", defaultValue: .first)\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af17db0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomSegmentedControl_Previews), actualDefinedInTypeName = Optional(CustomSegmentedControl_Previews)], rawMethods = [], rawSubscripts = [], initializers = [], annotations = [:], documentation = [], staticVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(\n        name: \"CustomSegmentedControl\",\n        section: \"Pickers\"\n    ) { context in\n        CustomSegmentedControl(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            selection: context.parameter(name: \"selection\", defaultValue: .first)\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af17db0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomSegmentedControl_Previews), actualDefinedInTypeName = Optional(CustomSegmentedControl_Previews)], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [], computedVariables = [], storedVariables = [], inheritedTypes = ["ExhibitProvider", "PreviewProvider"], inherits = [:], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = [:], modifiers = [], fileName = Optional("CustomSegmentedControl.swift"), kind = struct
                    CustomTextField_Previews.anyExhibit, //  Struct: module = nil, imports = [SwiftUI, Exhibition], allImports = [SwiftUI, Exhibition], typealiases = [:], isExtension = false, kind = struct, accessLevel = internal, name = CustomTextField_Previews, isUnknownExtension = false, isGeneric = false, localName = CustomTextField_Previews, rawVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(name: \"CustomTextField\") { context in\n        CustomTextField(\n            doublePlaceholder: context.parameter(name: \"doublePlaceholder\", defaultValue: \"0.0\"),\n            floatPlaceholder: context.parameter(name: \"floatPlaceholder\", defaultValue: \"0.0\"),\n            doubleValue: context.parameter(name: \"doubleValue\", defaultValue: nil),\n            floatValue: context.parameter(name: \"floatValue\", defaultValue: nil)\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af1adf0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomTextField_Previews), actualDefinedInTypeName = Optional(CustomTextField_Previews), Variable: name = previews, typeName = some View, isComputed = true, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = , accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.none), isMutable = false, defaultValue = nil, annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af1b130>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomTextField_Previews), actualDefinedInTypeName = Optional(CustomTextField_Previews)], rawMethods = [], rawSubscripts = [], initializers = [], annotations = [:], documentation = [], staticVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(name: \"CustomTextField\") { context in\n        CustomTextField(\n            doublePlaceholder: context.parameter(name: \"doublePlaceholder\", defaultValue: \"0.0\"),\n            floatPlaceholder: context.parameter(name: \"floatPlaceholder\", defaultValue: \"0.0\"),\n            doubleValue: context.parameter(name: \"doubleValue\", defaultValue: nil),\n            floatValue: context.parameter(name: \"floatValue\", defaultValue: nil)\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af1adf0>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomTextField_Previews), actualDefinedInTypeName = Optional(CustomTextField_Previews), Variable: name = previews, typeName = some View, isComputed = true, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = , accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.none), isMutable = false, defaultValue = nil, annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af1b130>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomTextField_Previews), actualDefinedInTypeName = Optional(CustomTextField_Previews)], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [], computedVariables = [], storedVariables = [], inheritedTypes = ["ExhibitProvider", "PreviewProvider"], inherits = [:], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = [:], modifiers = [], fileName = Optional("CustomTextField.swift"), kind = struct
                    CustomToggle_Previews.anyExhibit, //  Struct: module = nil, imports = [Exhibition, SwiftUI], allImports = [Exhibition, SwiftUI], typealiases = [:], isExtension = false, kind = struct, accessLevel = internal, name = CustomToggle_Previews, isUnknownExtension = false, isGeneric = false, localName = CustomToggle_Previews, rawVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(name: \"CustomToggle\") { context in\n        CustomToggle(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            isOn: context.parameter(name: \"isOn\")\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af14010>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomToggle_Previews), actualDefinedInTypeName = Optional(CustomToggle_Previews)], rawMethods = [Method: name = exhibitLayout(_ content: CustomToggle), selectorName = exhibitLayout(_:), parameters = [MethodParameter: argumentLabel = nil, name = content, typeName = CustomToggle, `inout` = false, isVariadic = false, typeAttributes = [:], defaultValue = nil, annotations = [:], asSource = _ content: CustomToggle], returnTypeName = some View, isAsync = false, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = true, isClass = false, isFailableInitializer = false, annotations = [:], documentation = [], definedInTypeName = Optional(CustomToggle_Previews), attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af12880>]], rawSubscripts = [], initializers = [], annotations = [:], documentation = [], staticVariables = [Variable: name = exhibit, typeName = Exhibit, isComputed = false, isAsync = false, `throws` = false, isStatic = true, readAccess = internal, writeAccess = internal, accessLevel = (read: SourceryRuntime.AccessLevel.internal, write: SourceryRuntime.AccessLevel.internal), isMutable = true, defaultValue = Optional("Exhibit(name: \"CustomToggle\") { context in\n        CustomToggle(\n            title: context.parameter(name: \"title\", defaultValue: \"Title\"),\n            isOn: context.parameter(name: \"isOn\")\n        )\n    }"), annotations = [:], documentation = [], attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af14010>], isFinal = false, isLazy = false, definedInTypeName = Optional(CustomToggle_Previews), actualDefinedInTypeName = Optional(CustomToggle_Previews)], staticMethods = [Method: name = exhibitLayout(_ content: CustomToggle), selectorName = exhibitLayout(_:), parameters = [MethodParameter: argumentLabel = nil, name = content, typeName = CustomToggle, `inout` = false, isVariadic = false, typeAttributes = [:], defaultValue = nil, annotations = [:], asSource = _ content: CustomToggle], returnTypeName = some View, isAsync = false, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = true, isClass = false, isFailableInitializer = false, annotations = [:], documentation = [], definedInTypeName = Optional(CustomToggle_Previews), attributes = [:], modifiers = [<SourceryRuntime.Modifier: 0x14af12880>]], classMethods = [], instanceVariables = [], instanceMethods = [], computedVariables = [], storedVariables = [], inheritedTypes = ["ExhibitProvider", "PreviewProvider"], inherits = [:], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = [:], modifiers = [], fileName = Optional("CustomToggle.swift"), kind = struct
                ]
            )
        }
    }
}

struct Exhibition_Previews: PreviewProvider {
    static var previews: some View {
        Exhibition()
    }
}
